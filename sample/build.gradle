//单独工程和lib的声明不同
if (isSampleRunAsApp.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'//引入kapt插件
apply plugin: "com.tencent.android.tpns"//推送


android {
    signingConfigs {
        config {
            keyAlias 'sample'
            keyPassword '123456'
            storeFile file('sample.jks')
            storePassword '123456'
            // 默认情况下，Android Gradle 插件 2.2 同时启用这两个签署架构。
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    //限定资源命名规范
//    resourcePrefix project.getName() + "_"
    compileSdkVersion 31
    defaultConfig {
        minSdkVersion 21
//        minSdkVersion 28
//        targetSdkVersion rootProject.ext.targetSdkVersion

        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        //作为单独工程，需要设置applicationID
        if (isSampleRunAsApp.toBoolean()) {
            applicationId "com.canzhang.sample"
        }
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        signingConfig signingConfigs.config

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14"
            }
        }

        ndk {
            // 设置支持的SO库架构  注意部分SDK架构支持不全
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'x86','armeabi-v7a', 'arm64-v8a'
            // 还可以添加  'armeabi-v7a', 'arm64-v8a', 'mips', 'mips64'
        }
        multiDexEnabled true//开启分包

        manifestPlaceholders = [
                HW_APPID: "103112377"
        ]
    }
    compileOptions {//flutter 需要这样声明
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {//忽略一些命名规则
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    sourceSets {
        main {
            // 单独调试与集成调试时使用不同的 AndroidManifest.xml 文件
            if (isSampleRunAsApp.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
                //多增加一个资源调试路径 src/main/debug/res
                res.srcDirs = ['src/main/res', 'src/main/debug/res']

            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //module 模式下要 排除src/test/文件夹下的所有文件
                    exclude 'src/debug/'
                }
            }

            //为了让项目能够找到我们的 so 库，在 build.gradle 文件夹的 android 下添加：
            jni.srcDirs = []
            // disable automatic ndk-build call, which ignore our Android.mk(屏蔽掉默认的jni编译生成过程)
            jniLibs.srcDirs = ['src/main/libs']

        }


    }
    buildTypes {
        release {
            minifyEnabled true//开启混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    productFlavors {
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:' + rootProject.ext.constraintLayoutVersion
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'com.android.support:support-v4:' + rootProject.ext.supportVersion
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.google.android.material:material:1.2.1'
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:${rootProject.ext.baseRecyclerViewAdapterHelperVersion}"
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    //圆角布局
    api 'com.flyco.roundview:FlycoRoundView_Lib:' + rootProject.ext.roundViewVersion
    implementation project(':debug-dialog')

    //二维码
    implementation 'com.google.zxing:core:' + rootProject.ext.zxingCoreVersion

    //weex
    implementation "com.alibaba:fastjson:${rootProject.ext.fastjsonVersion}"
    implementation "com.taobao.android:weex_sdk:${rootProject.ext.weexVersion}"

    //glide
    implementation 'com.github.bumptech.glide:glide:' + rootProject.ext.glideVersion
    annotationProcessor 'com.github.bumptech.glide:compiler:' + rootProject.ext.glideVersion

    //阴影效果，这个会导致控件变小 https://github.com/JuHonggang/ShadowDrawable
    implementation 'com.github.JuHonggang:ShadowDrawable:0.1'

    //阴影效果 https://github.com/harjot-oberai/MaterialShadows

    //    implementation 'com.sdsmdg.harjot:materialshadows:1.2.5'

    //图片压缩
    implementation 'top.zibin:Luban:1.1.8'
    implementation project(':base')
//    implementation project(':flutter')
    implementation 'com.android.support:design:' + rootProject.ext.supportVersion


    //第三方卡顿监控框架
    api 'com.github.markzhai:blockcanary-android:1.5.0'

    //权限
    implementation 'com.yanzhenjie.permission:support:2.0.1'

    //数据库 WCDB  https://github.com/Tencent/wcdb/wiki/Android%E6%8E%A5%E5%85%A5%E4%B8%8E%E8%BF%81%E7%A7%BB
//    implementation 'com.tencent.wcdb:wcdb-android:1.0.5'

//    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.17'


    //自定义注解测试
    api project(':simplebutterknife-annotations')
    kapt project(':simplebutterknife-compiler')
    api project(':simple-test-annotations')
    kapt project(':simple-test-compiler')//如果需要支持kotlin 需要使用kapt 替代 annotationProcessor



    //集成上面的Rxjava之后 居然要求分包了
    api 'com.android.support:multidex:1.0.3'


    def lifecycle_version = "2.2.0"
    def arch_version = "2.1.0"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"

    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"

    // Annotation processor
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"

    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    //使用信鸽 导入华为推送sdk
    implementation 'com.tencent.tpns:huawei:1.2.1.0-release'

    //heif编解码
//    implementation "androidx.heifwriter:heifwriter:1.0.0"

    implementation 'com.jaeger.statusbarutil:library:1.4.0'

    implementation "androidx.core:core-splashscreen:1.0.0-alpha02"
}
